name: Create AKS Cluster

on:
  push:
    branches: [ 'main' ]
    paths:
      - "**/azure/**"
  pull_request:
    branches: [ 'main' ]
    paths:
      - "**/azure/**"

permissions:
  pull-requests: write

env:
  ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
  TF_VERSION: 1.4.6
  TG_VERSION: 0.48.7
  TG_DIR: infra/live/azure/linux-public/
  TERRAGRUNT_NON_INTERACTIVE: true

jobs:
  create:
    name: Create AKS Cluster
    runs-on: ubuntu-latest
    environment: azure

    steps:
      - name: Checkout Codebase
        uses: actions/checkout@v3.5.3

      - name: Terraform Init
        uses: gruntwork-io/terragrunt-action@v1.0.7
        with:
          tf_version: ${{ env.TF_VERSION }}
          tg_version: ${{ env.TG_VERSION }}
          tg_dir: ${{ env.TG_DIR }}
          tg_command: init

      - name: Terragrunt HCL Format
        uses: gruntwork-io/terragrunt-action@v1.0.7
        with:
          tf_version: ${{ env.TF_VERSION }}
          tg_version: ${{ env.TG_VERSION }}
          tg_dir: ${{ env.TG_DIR }}
          tg_command: hclfmt --terragrunt-check --terragrunt-diff

      - name: Terraform Format
        uses: gruntwork-io/terragrunt-action@v1.0.7
        with:
          tf_version: ${{ env.TF_VERSION }}
          tg_version: ${{ env.TG_VERSION }}
          tg_dir: ${{ env.TG_DIR }}
          tg_command: fmt -check -diff -recursive

      - name: Terraform Validate
        uses: gruntwork-io/terragrunt-action@v1.0.7
        with:
          tf_version: ${{ env.TF_VERSION }}
          tg_version: ${{ env.TG_VERSION }}
          tg_dir: ${{ env.TG_DIR }}
          tg_command: validate

      - name: Terraform Plan
        id: terragrunt_plan
        uses: gruntwork-io/terragrunt-action@v1.0.7
        with:
          tf_version: ${{ env.TF_VERSION }}
          tg_version: ${{ env.TG_VERSION }}
          tg_dir: ${{ env.TG_DIR }}
          tg_command: plan -out plan.out

      - name: Terraform Show
        uses: gruntwork-io/terragrunt-action@v1.0.7
        with:
          tf_version: ${{ env.TF_VERSION }}
          tg_version: ${{ env.TG_VERSION }}
          tg_dir: ${{ env.TG_DIR }}
          tg_command: show -no-color plan.out > plan.txt

      - name: Add PR Comment
        uses: actions/github-script@v6.4.1
        with:
          script: |
            const fs = require('fs');
            const output = `
            #### Terragrunt Plan \`${{ steps.terragrunt_plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${fs.readFileSync('${{ env.TG_DIR }}/plan.txt')}\`\`\`
            </details>`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # - name: Terragrunt Apply
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   uses: gruntwork-io/terragrunt-action@v1.0.7
      #   with:
      #     tf_version: ${{ env.TF_VERSION }}
      #     tg_version: ${{ env.TG_VERSION }}
      #     tg_dir: ${{ env.TG_DIR }}
      #     tg_command: apply
      
    # - name: azure cli call to check cluster status
    #   id: cluster-status
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   run: |
    #     status=$(az aks show --name "sk8s" --resource-group "sk8s-cluster" | jq '.provisioningState')
    #     echo "status=$status" >> $GITHUB_OUTPUT
        
    # - name: Terraform Destroy
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   run: terragrunt destroy -auto-approve
      
    # - name: check successful deployment or fail
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.cluster-status.outputs.status != '"Succeeded"'
    #   run: exit 1
